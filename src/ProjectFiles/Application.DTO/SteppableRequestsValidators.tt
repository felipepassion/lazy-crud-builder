using LazyCrudBuilder.Core.Application.DTO.Aggregates.CommonAgg.Models;
using LazyCrudBuilder.Core.Application.DTO.Aggregates.CommonAgg.Validators;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel;
using FluentValidation;
namespace <#= GetDefaultNamespace() #>.<#= project.Name #>.Aggregates.<#= AggName #>.Validators {
    public class Base<#=AggName#>Validator<T> : BaseValidator<T>
        where T : EntityDTO
    {
            public Base<#=AggName#>Validator() : base(){ }
            public Base<#=AggName#>Validator(HttpClient db) : base(db){ }
    }
}
<#
if (entitiesT4.Any()) {#>
<# foreach(var namespaces in groupEntitiesT4) { 
var myNamespace = namespaces.Key.Replace("Entities","Validators").Replace("Domain","Application.DTO"); #>
namespace <#= myNamespace #> 
{
	using Requests;
<# foreach(var entity in namespaces) { 
var otherNamespace = entity.Namespace.FullName.Replace("Domain","Application.DTO");
var stepsCount=1;
bool ignoreStep = false;
try{
stepsCount = int.Parse(GetAttributes(entity, includeSteppableAttributes: true).Max(x=>x.FirstOrDefault(p=>char.IsDigit(p))).ToString());
}catch{ignoreStep=true;}

for (int i = 1; i <= stepsCount; i++) {
var className = $"{entity.Name}Step{i}Validator";#>
    public partial class <#=className#> : Base<#= AggName#>Validator<<#=entity.Name#>DTO>
	{
        public <#= className #>(HttpClient db)
                    : base(db)
        {
            <#= WriteValidator(entity, i, entity.Name, ignoreStep) #>
            ConfigureAdditionalValidations();
        }
        partial void ConfigureAdditionalValidations();
    }
<# } #>
<# } #>
}
<# } #>
<# } #>
<# SaveOutputToSubFolder(
    folderName: $"T4", 
    outputFileName: @$"{AggName}.SteppableRequestsValidators.cs", 
    recreateFileIfExists: true);
if (entitiesT4.Any()) {
    foreach(var namespaces in groupEntitiesT4) { 
        var myNamespace = namespaces.Key.Replace("Entities","Validators").Replace("Domain","Application.DTO");
        foreach(var entity in namespaces) {
        if(!ContainsAttribute(entity, "AutoGenerateDefaultFiles")) continue;
        
        string attr = GetAttributes(entity, includeSteppableAttributes: true).FirstOrDefault(x=>x.Contains("Step"));
		if (string.IsNullOrWhiteSpace(attr)) attr="1";#>        
namespace <#= GetDefaultNamespace() #>.<#= project.Name #>.Aggregates.<#= AggName #>.Validators {
    using Requests;
<#var stepsCount = int.Parse(attr.FirstOrDefault(p=>char.IsDigit(p)).ToString());
            for (int i = 1; i <= stepsCount; i++) {
            var className = $"{entity.Name}Step{i}Validator";#>
    public partial class <#=className#> : Base<#= AggName#>Validator<<#=entity.Name#>DTO>
	{
        partial void ConfigureAdditionalValidations() {}
    }
<#}#>
}
<#SaveOutputToSubFolder(
    folderName: $@"Aggregates\{AggName}\Validators", 
    outputFileName: @$"{entity.Name}Validator.cs", 
    recreateFileIfExists: false);}
    }   
}#>