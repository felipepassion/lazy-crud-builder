<# if (entities.Any()) { #>
using LazyCrudBuilder.CrossCuting.Infra.Utils.Extensions;
using System.Linq.Expressions;
using <#= GetDefaultNamespace() #>.Core.Domain.Seedwork.Specification;
using LazyCrudBuilder.CrossCuting.Infra.Utils.Extensions;

<# foreach(var namespaces in groupEntitiesT4) { #>
namespace <#= namespaces.Key.Replace("Entities", "Filters") #>{
<#
	var aggName = namespaces.Key.Split('.').FirstOrDefault(x=>x.EndsWith("Agg"));
#>
	using Entities;
	using Specifications;
	using Queries.Models;
<# foreach(var entity in namespaces) { #>
	public static class <#= entity.Name #>Filters 
	{
	    public static Expression<Func<<#= entity.Name #>, bool>> GetFilters(this <#= entity.Name #>QueryModel request, bool isOrSpecification = false)

		{ return request.GetFiltersSpecification(isOrSpecification).SatisfiedBy(); }
		public static Specification<<#= entity.Name #>> GetFiltersSpecification(this <#= entity.Name #>QueryModel request, bool isOrSpecification = false) 
		{
			Specification<<#= entity.Name #>> filter = new DirectSpecification<<#= entity.Name #>>(p => request.IsEmpty() || !isOrSpecification);
			if(request is not null)
			{
<# foreach(var property in GetProperties(entity)) {
	var name = property.Key.Replace("[]", string.Empty);
	var path = property.Key;
    var type = FindType(property.Value.Type.CodeType.FullName.Replace("?", string.Empty));
switch(property.Value.Type.AsString) {
	case "string": #>
				if (!string.IsNullOrWhiteSpace(request.<#= path #>Equal)) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>Equal(request.<#= path #>Equal);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>Equal(request.<#= path #>Equal);
				}
				if (!string.IsNullOrWhiteSpace(request.<#= path #>NotEqual)) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>NotEqual(request.<#= path #>NotEqual);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>NotEqual(request.<#= path #>NotEqual);
				}
				if (!string.IsNullOrWhiteSpace(request.<#= path #>Contains)) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>Contains(request.<#= path #>Contains);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>Contains(request.<#= path #>Contains);
				}
				if (!string.IsNullOrWhiteSpace(request.<#= path #>StartsWith)) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>StartsWith(request.<#= path #>StartsWith);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>StartsWith(request.<#= path #>StartsWith);
				}
<#	break; 
	case "System.Guid":
	case "System.Guid?":
	case "bool":
	case "bool?": #>
				if (request.<#= path #>Equal.HasValue) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>Equal(request.<#= path #>Equal.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>Equal(request.<#= path #>Equal.Value);
				}
<#	break; 
	case "decimal": 
	case "decimal?": 
	case "double":
	case "double?":
	case "System.DateTimeOffset":
	case "System.DateTimeOffset?":
	case "int":
	case "int?":
	case "System.DateOnly":
	case "System.DateOnly?":
	case "System.TimeOnly":
	case "System.TimeOnly?":
	case "System.DateTime":
	case "System.DateTime?":
#>
				if (request.<#= path #>Equal.HasValue)
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>Equal(request.<#= path #>Equal.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>Equal(request.<#= path #>Equal.Value);
				}
				if (request.<#= path #>NotEqual.HasValue)
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>NotEqual(request.<#= path #>NotEqual.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>NotEqual(request.<#= path #>NotEqual.Value);
				}
				if (request.<#= path #>Contains != null)
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>Contains(request.<#= path #>Contains);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>Contains(request.<#= path #>Contains);
				}
				if (request.<#= path #>NotContains != null)
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>NotContains(request.<#= path #>NotContains);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>NotContains(request.<#= path #>NotContains);
				}
<#if(name.Equals("Id")) continue;#>
				if (request.<#= path #>Since.HasValue)
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>GreaterThanOrEqual(request.<#= path #>Since.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>GreaterThanOrEqual(request.<#= path #>Since.Value);
				}
				if (request.<#= path #>Until.HasValue)
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>LessThan(request.<#= path #>Until.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>LessThan(request.<#= path #>Until.Value);
				}
				if (request.<#= path #>NotEqual.HasValue) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>NotEqual(request.<#= path #>NotEqual.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>NotEqual(request.<#= path #>NotEqual.Value);
				}
				if (request.<#= path #>LessThan.HasValue) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>LessThan(request.<#= path #>LessThan.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>LessThan(request.<#= path #>LessThan.Value);
				}
				if (request.<#= path #>GreaterThan.HasValue) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>GreaterThan(request.<#= path #>GreaterThan.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>GreaterThan(request.<#= path #>GreaterThan.Value);
				}
				if (request.<#= path #>LessThanOrEqual.HasValue) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>LessThanOrEqual(request.<#= path #>LessThanOrEqual.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>LessThanOrEqual(request.<#= path #>LessThanOrEqual.Value);
				}
				if (request.<#= path #>GreaterThanOrEqual.HasValue) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>GreaterThanOrEqual(request.<#= path #>GreaterThanOrEqual.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>GreaterThanOrEqual(request.<#= path #>GreaterThanOrEqual.Value);
				}
<#	break; 
	default:
	if(type is CodeEnum){#>
				if (request.<#= path #>Equal.HasValue) 
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>Equal(request.<#= path #>Equal.Value);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>Equal(request.<#= path #>Equal.Value);
				}
<#}  else if(property.Value.Type.AsString.Contains("Enumeration")) {
		
		var isList = property.Value.Type.AsString.Contains("List<");
        var prefix = property.Value.Type.AsString.Replace("Entities","Requests").Replace("Domain","Application.DTO");
		if(isList)
			prefix = prefix.Replace("System.Collections.Generic.List<","").Replace(">","");
		else
			continue;

        var spplited = prefix.Split('.');
        var propType = spplited[spplited.Length-1].Replace("[]","").Replace("?","");
        var isArray = isList || spplited[spplited.Length-1].Contains("[]") || spplited[spplited.Length-1].Contains("List<");
		var t = property.Value.Type.AsString.Replace("System.Collections.Generic.List<","").Replace(">","");
		        
        var typeAggName = t.Split('.').FirstOrDefault(x=>x.EndsWith("Agg"))?.Replace("Agg","");
        if(typeAggName == null){
            typeAggName = property.Value.Type.AsString;
            propType = propType.Replace("DTO","");
        }

		spplited[spplited.Length-1] = propType;

		var propName = string.Join(".",spplited);

		var propNameType = isArray ? $"List<{propName}>" : propName;
		var propNameNew = "";
        if(propName == "Profissional")
        {
        }#>
				if (request.<#= path #>Contains != null)
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>Contains(request.<#= path #>Contains);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>Contains(request.<#= path #>Contains);
				}
				if (request.<#= path #>NotContains != null)
				{
					if (isOrSpecification)
						filter |= <#= entity.Name #>Specifications.<#= path #>NotContains(request.<#= path #>NotContains);
					else
						filter &= <#= entity.Name #>Specifications.<#= path #>NotContains(request.<#= path #>NotContains);
				}
<#}
	break;
}#>
<# } #>
			}
			return filter;
		}
	}
<# } #>
}
<# } #>
<# } #>

<# SaveOutputToSubFolder(
    folderName: $"T4", 
    outputFileName: @$"{AggName}.Filters.cs", 
    recreateFileIfExists: true); #>