using LazyCrud.Core.Application.DTO.Aggregates.CommonAgg.Models;
using LazyCrud.Core.Application.DTO.Aggregates.CommonAgg.Validators;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel;
using FluentValidation;
using AutoMapper;
using LazyCrud.Core.Application.DTO.Attributes;
<#
if (entitiesT4.Any()) {#>
<# foreach(var namespaces in groupEntitiesT4) {
var aggName = namespaces.Key.Split('.').FirstOrDefault(x=>x.EndsWith("Agg"));
var myNamespace = namespaces.Key.Replace("Entities","Profiles"); #>
namespace <#= myNamespace #>
{
	using Application.DTO.Aggregates.<#= aggName #>.Requests;
	using Entities;
<# foreach(var entity in namespaces) { 
var otherNamespace = entity.Namespace.FullName.Replace("Domain","Application.DTO");
var className = $"{entity.Name}ListiningDTO";
var attrs = GetAttributesDict(entity);
if(!attrs.Any(x=>x.Key == "EndpointsT4")) continue;
var canGet = attrs["EndpointsT4"].Any(x=>x.Value.Contains("HttpListining") || x.Value.Contains("All"));
if(!canGet) continue;
var AggName2 = namespaces.Key.Split('.').First(x=>x.EndsWith("Agg"));
#>
	public partial class <#= entity.Name #>ListiningProfile : Profile
	{
		public <#= entity.Name #>ListiningProfile()
		{
			 CreateMap<<#= entity.Name #>, <#= entity.Name #>ListiningDTO>()<#= WriteListiningProfile(entity) #>;
		}
	}
<# } #>
}
<# } #>
<# } #>
<# SaveOutputToSubFolder(
    folderName: $"T4", 
    outputFileName: @$"{AggName}.ProfilesListiningMapping.cs",
    recreateFileIfExists: true); #>