<# if (allEntities.Any()) {
	 foreach (var nmspc in groupAllEntities) { #>
using <#= nmspc.Key #>;
<# } #>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

<# foreach(var namespaces in groupAllEntities) { #>
namespace <#= namespaces.Key.Replace("Entities", "Mappings").Replace("Domain","Infra.Data") #> 
{
<#
    var isFromSameAgg = AggName == namespaces.Key.Split('.').FirstOrDefault(x=>x.EndsWith("Agg"));
	foreach (var entity in namespaces) { 
        var oneToOneRelations = GetProperties(entity).Where(x=>GetAttributes(x.Value, false, true).Any(p=>p.Contains("OneToOne"))).ToArray();
        //var relationProperties2 = GetAttributes(entity).Where(x=>x.Name.Contains("T4"));
#>
    public partial class <#= entity.Name #>Mapping : IEntityTypeConfiguration<<#= entity.Name #>>
    {
        public void Configure(EntityTypeBuilder<<#= entity.Name #>> builder)
        {
<# if(!isFromSameAgg){ #>
            builder.Metadata.SetIsTableExcludedFromMigrations(true);
<#}#>
<# foreach(var item in oneToOneRelations){ #>
            builder.HasOne(x => x.<#= item.Key #>).WithOne().HasForeignKey<<#= item.Value.Type.AsFullName.Split('.').Last() #>>("Id");
<#}#>
            builder.HasKey(x => x.Id);
            ConfigureAdditionalMapping(builder);
        }

		partial void ConfigureAdditionalMapping(EntityTypeBuilder<<#= entity.Name #>> builder);
    }
<# } #>
}
<# } #>
<# } #>
<# SaveOutputToSubFolder(
    folderName: $"T4", 
    outputFileName: @$"{AggName}.Mappings.cs", 
    recreateFileIfExists: true); #>