@using System;
@using System.Linq;
@using System.IO;

@using Microsoft.AspNetCore.Components.QuickGrid

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists

@page "/"

@inject WeatherForecastService ForecastService

@using System.Diagnostics;
@using System.Reflection;
@using T4AggregatesManager.Data
@using T4AggregatesManager.Models;
@using Microsoft.Extensions.CommandLineUtils;

@if (forecasts == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="aggregate-creator">
        <input placeholder="Novo Aggregate" @bind-value="AggregateName" />
        <button @onclick="CreateAggregate">Criar</button>
    </div>
    <button class="btn btn-primary" @onclick="RefreshFrontEndPages">Atualizar Front-End</button>
    <button class="btn btn-primary" @onclick="RefreshClient">Atualizar Client</button>
    <button class="btn btn-primary" @onclick="RefreshServer">Atualizar Server</button>

    <table class="table">
        <thead>
            <tr>
                <th>Aggregate</th>
                <th>Caminho</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr @onclick="(x)=>OnClickAggContainer(forecast)" class="aggregate-container">
                    <td>@forecast.AggName</td>
                    <td>@forecast.ShortPath</td>
                    <td><button class="btn btn-primary" @onclick="()=>IncrementCount(forecast)">Resetar Agg</button></td>
                    <td>
                        <button class="btn btn-primary" @onclick="async ()=>{ await CreateNewMigration(forecast); }">
                            @{
                                if (forecast.Loading)
                                {
                                    <span>Carregando...</span>
                                }
                                else
                                {
                                    <span>Criar novo Migration</span>
                                }
                            }
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="(x)=>DeleteAggregate(forecast.AggName)">
                            Deletar
                        </button>
                    </td>
                </tr>
                @if (_clickedAggName == forecast.AggName)
                {
                    <tr class="aggregate-container entities">
                        <td>
                            <input placeholder="Nova Entidade" @bind-value="EntityName" />
                        </td>
                        <td>
                            <button @onclick="(x)=>CreateEntity(forecast.AggName, EntityName)">Criar</button>
                        </td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                    @foreach (var entity in GetMyEntities(forecast.AggName))
                    {
                        <tr @onclick="(x)=>this.OnClickEntityContainer(forecast, entity)" class="aggregate-container entities">
                            <td class="aggregate-columns">
                                <p>@entity</p>
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="(x)=>DeleteEntity(forecast.AggName, entity)">
                                    Deletar
                                </button>
                            </td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                        @if (this._clickedAggName == forecast.AggName && this._clickedEntityName == entity)
                        {
                            <tr class="aggregate-container properties">
                                <td class="aggregate-columns">
                                    <input placeholder="Nova Propriedade" @bind-value="PropertyName" />
                                </td>
                                <td>
                                    <button @onclick="(x)=>CreateProperty(forecast.AggName, entity, PropertyName)">Criar</button>

                                </td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                            @foreach (var prop in GetMyProperties(forecast.AggName, entity))
                            {
                                <tr class="aggregate-container properties">
                                    <td>
                                    </td>
                                    <td>
                                        @prop.Key
                                    </td>
                                    <td>
                                        <select @onchange="(x)=>OnPropertyTypeChanged(x, forecast, prop, entity)">
                                            @foreach (var item in Enum.GetValues<ObjectValueTypes>())
                                            {
                                                <option selected="@(item==GetMyPropertyType(forecast.AggName, prop.Value))" value="@item">@item</option>
                                            }
                                        </select>
                                        <select @onchange="(x)=>OnPropertyTypeNameChanged(x, forecast, prop, entity)">
                                            @foreach (var item in GetPropValues(forecast.AggName, prop.Value))
                                            {
                                                <option selected="@(item.Equals(prop.Value, StringComparison.InvariantCultureIgnoreCase))" value="@item">@item</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="(x)=>DeleteProperty(forecast.AggName, entity, prop.Key)">
                                            Deletar
                                        </button>
                                    </td>
                                    <td></td>
                                </tr>
                            }
                        }
                    }

                }
            }
        </tbody>
    </table>
}

@code {
    string _clickedAggName;
    string _clickedEntityName;

    string AggregateName { get; set; }
    string EntityName { get; set; }
    string PropertyName { get; set; }

    void OnPropertyTypeNameChanged(ChangeEventArgs args, T4FileInfo fileInfo, PropertyDetails propDetails, string entity)
    {
        var defaultValue = (args.Value.ToString()!);

        propDetails.Value = defaultValue;

        var path = $@"..\..\..\{fileInfo.AggName}\{fileInfo.AggName}.Domain\Aggregates\{fileInfo.AggName}Agg\Entities\{entity}.cs";
        AggregateCreator.UpdatePropriedadeComAtributos(path, propDetails.Key, defaultValue);
        this.StateHasChanged();
    }

    void OnPropertyTypeChanged(ChangeEventArgs args, T4FileInfo fileInfo, PropertyDetails propDetails, string entity)
    {
        var propType = Enum.Parse<ObjectValueTypes>(args.Value.ToString()!);
        var defaultValue = GetPropValues(propType, fileInfo.AggName).FirstOrDefault();
        var nmspc = GetPropNamespace(propType, fileInfo.AggName);

        propDetails.Value = defaultValue;

        var path = $@"..\..\..\{fileInfo.AggName}\{fileInfo.AggName}.Domain\Aggregates\{fileInfo.AggName}Agg\Entities\{entity}.cs";
        AggregateCreator.UpdatePropriedadeComAtributos(path, propDetails.Key, defaultValue);
        this.StateHasChanged();
    }
    string[] GetPropValues(string aggName, string propValue)
    {
        ObjectValueTypes type = GetMyPropertyType(aggName, propValue);
        return GetPropValues(type, aggName);
    }
    string GetPropNamespace(ObjectValueTypes type, string aggName)
    {
        switch (type)
        {
            case ObjectValueTypes.Entity:
                return "Entities";
            case ObjectValueTypes.Enumeration:
                return "Enumerations";
            default:
            case ObjectValueTypes.Property:
                return "";
        }
    }
    string[] GetPropValues(ObjectValueTypes type, string aggName)
    {
        switch (type)
        {
            case ObjectValueTypes.Entity:
                return GetMyEntities(_clickedAggName).ToArray();
            case ObjectValueTypes.Enumeration:
                return GetMyEnumerations(aggName).Select(x => x.ToString()).ToArray();
            case ObjectValueTypes.Property:
                return tiposVariaveisNormais.Select(x => x).ToArray();
            default:
                return new string[] { };
        }
    }

    enum ObjectValueTypes
    {
        Entity,
        Enumeration,
        Property
    }

    void OnClickEntityContainer(T4FileInfo agg, string entityName)
    {
        if (_clickedEntityName == entityName)
        {
            _clickedEntityName = null;
        }
        else
        {
            _clickedEntityName = entityName;
        }

        this.StateHasChanged();
    }

    void OnClickAggContainer(T4FileInfo agg)
    {
        if (_clickedAggName == agg.AggName)
        {
            _clickedAggName = null;
        }
        else
        {
            _clickedAggName = agg.AggName;
        }

        this.StateHasChanged();
    }

    void DeleteAggregate(string agg)
    {
        AggregateCreator.DeleteAggregate(agg);
        this.StateHasChanged();
    }
    void CreateEntity(string agg, string entityName)
    {
        AggregateCreator.CreateEntity(agg, entityName);
        this.EntityName = null!;
        this.StateHasChanged();
    }
    void CreateProperty(string aggName, string entityName, string propName)
    {
        var propType = ObjectValueTypes.Property;
        var defaultValue = GetPropValues(propType, aggName).FirstOrDefault();
        var nmspc = GetPropNamespace(propType, aggName);

        var path = $@"..\..\..\{aggName}\{aggName}.Domain\Aggregates\{aggName}Agg\Entities\{entityName}.cs";
        AggregateCreator.AdicionarPropriedadeSeNaoExistir(path, defaultValue, propName);
        this.PropertyName = null;
        this.StateHasChanged();
    }
    void DeleteEntity(string agg, string entityName)
    {
        AggregateCreator.DeleteEntity(agg, entityName);
        this.StateHasChanged();
    }
    void DeleteProperty(string aggName, string entityName, string propName)
    {
        var path = $@"..\..\..\{aggName}\{aggName}.Domain\Aggregates\{aggName}Agg\Entities\{entityName}.cs";
        AggregateCreator.CanDeletePropriedadeComAtributos(path, propName);
        this.StateHasChanged();
    }

    void CreateAggregate()
    {
        if (string.IsNullOrWhiteSpace(AggregateName)) return;

        AggregateCreator.CreateNewAggregate(AggregateName);
        this.AggregateName = null!;
        this.StateHasChanged();
    }

    Dictionary<string, string> Loadings = new Dictionary<string, string>();
    private IQueryable<T4FileInfo> forecasts => GetAggregates();

    private void IncrementCount(T4FileInfo info)
    {
        var allT4InThisAgg = Directory.GetFiles(info.Path, "*Commands.tt", SearchOption.AllDirectories);
        var allGenerated = Directory.GetFiles(info.Path, "*generated.cs", SearchOption.AllDirectories);
        foreach (var item in allGenerated)
        {
            File.Delete(item);
        }
        foreach (string file in allT4InThisAgg)
        {
            RecreateT4File(file);
        }
        RefreshFrontEndPages();
        RefreshClient();
        RefreshServer();
    }

    async Task RefreshFrontEndPages()
    {
        var myFile = FindMyFile("*ClientPagesGenerator.tt");
        RecreateT4File(myFile);
    }

    async Task RefreshClient()
    {
        var myFile = FindMyFile("*ClientIoCFactory.tt");
        RecreateT4File(myFile);
    }

    async Task RefreshServer()
    {
        RecreateT4File(FindMyFile("*ServerIoCFactory.tt"));
        RecreateT4File(FindMyFile("*Controllers.tt"));
    }

    void RecreateT4File(string file)
    {
        var text = File.ReadAllText(file);
        if (File.Exists(file))
        {
            File.Delete(file);
            if (File.Exists(file + ".generated.cs"))
                File.Delete(file + ".generated.cs");
        }
        Thread.Sleep(1500);
        File.WriteAllText(file, text);
    }
    protected override async Task OnInitializedAsync()
    {
    }

    string FindMyFile(string searchPattern)
    {
        var srcFolder = FindMyFolder("src");
        return Directory.GetFiles(@$"{srcFolder}", searchPattern, SearchOption.AllDirectories).FirstOrDefault(x => !x.Contains("ProjectFiles"));
    }

    async Task CreateNewMigration(T4FileInfo info)
    {
        if (info.Loading && info.Process != null)
        {
            info.Process.Kill();
            info.Process = null;
            info.Loading = false;
            StateHasChanged();
            return;
        }

        info.Loading = true;
        StateHasChanged();
        await Task.Run(async () =>
        {
            var now = DateTime.Now;
            var nowStr = $"{now.Year}_{now.Month}_{now.Day}_{now.Hour}_{now.Minute}_{now.Second}";
            var srcFolder = FindMyFolder("src");
            var myMainServer = Directory.GetFiles(srcFolder, "*WebApi.csproj", SearchOption.AllDirectories).FirstOrDefault();
            var cmd = @$"dotnet ef migrations add {nowStr} -c {info.AggName}Aggcontext -p {info.Path}\{info.AggName}.Infra.Data --startup-project {myMainServer}";

            var app = new CommandLineApplication
                {
                    Name = "dotnet ef migrations add",
                };

            app.OnExecute(() =>
    {
        try
        {
            info.Process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "dotnet",
                        Arguments = cmd,
                        WorkingDirectory = AppDomain.CurrentDomain.BaseDirectory,
                        RedirectStandardOutput = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    }
                };
            Console.WriteLine($"Criando migration [{info.AggName}]");
            info.Process.Start();

            var output = info.Process?.StandardOutput?.ReadToEnd();
            Console.WriteLine(output ?? "Cancelado.");
            info.Process?.WaitForExit();
            info.Process?.Kill();
            info.Process = null;
            info.Loading = false;
            InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro ao criar o migrtion: " + ex.Message);
            info.Process?.Kill();
            info.Process = null;
            info.Loading = false;
            InvokeAsync(() => StateHasChanged());
        }
        finally
        {
        }
        return 1;
    });
            app.Execute();
        });

        info.Loading = false;
        this.StateHasChanged();
    }

    string FindMyFolder(string targetFolder)
    {
        string currentPath = Directory.GetCurrentDirectory(); // obtém o caminho atual

        // procura a pasta desejada nas pastas acima
        while (!Directory.Exists(Path.Combine(currentPath, targetFolder)))
        {
            currentPath = Path.GetDirectoryName(currentPath); // vai para o diretório pai
            if (currentPath == null)
            { // se chegar no caminho raiz e não encontrar a pasta
                throw new Exception("Pasta " + targetFolder + " não encontrada.");
            }
        }

        return currentPath;
    }

    bool _initialized = false;

    protected IQueryable<T4FileInfo> GetAggregates()
    {
        var currentPath = FindMyFolder("src");
        // obtém todos os arquivos com extensão ".csproj" na pasta da solution
        string[] files = Directory.GetFiles(currentPath, "*.csproj", SearchOption.AllDirectories);

        // filtra os arquivos que contém o nome desejado
        var domainProjects = files.Where(file => file.EndsWith("Domain.csproj") && !file.Contains("DefaultTemplate")).ToArray();
        List<string> Domains = new List<string>();
        var aggFiles = new List<T4FileInfo>();

        for (int i = 0; i < domainProjects.Length; i++)
        {
            var spplitedName = domainProjects[i].Split(@"\").Last().Split(".");
            if (spplitedName.Count() != 3) continue;

            var projectName = spplitedName[0];

            if (!projectName.Contains("Backup") && !projectName.StartsWith("Core"))
                aggFiles.Add(new T4FileInfo(projectName, domainProjects[i]));
        }

        // imprime o nome de cada projeto encontrado
        return aggFiles.AsQueryable();
    }

    IEnumerable<string> GetMyEntities(string aggName)
    {
        var path = $@"..\..\..\{aggName}\{aggName}.Domain\Aggregates\{aggName}Agg\Entities";
        var files = Directory.GetFiles(path).Select(x => x.Split(@"\").LastOrDefault()!.Replace(".cs", "")); ;

        return files;
    }
    IEnumerable<string> GetMyEnumerations(string aggName)
    {
        var path = $@"..\..\..\{aggName}\{aggName}.Enumerations";
        var files = Directory.GetFiles(path).Where(x => x.EndsWith(".cs")).Select(x => x.Split(@"\").LastOrDefault()!.Replace(".cs", "")); ;

        return files;
    }

    PropertyDetails[] GetMyProperties(string aggName, string fileName)
    {
        var path = $@"..\..\..\{aggName}\{aggName}.Domain\Aggregates\{aggName}Agg\Entities\{fileName}.cs";
        return AggregateCreator.GetProperties(path).Select(x => new PropertyDetails { Key = x.Key, Value = x.Value }).ToArray();
    }

    public IEnumerable<Item> LocalData => new Item().ItemList();

    public class Item
    {
        public string ID { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }

        public Item(string entidade)
        {

        }
        public Item() { }

        public List<Item> ItemList()
        {
            List<Item> items = new List<Item>();

            items.Add(new Item { ID = "1", Name = "Item 1", Category = "Entidades Normais" });
            items.Add(new Item { ID = "2", Name = "Item 2", Category = "Entidades Normais" });
            items.Add(new Item { ID = "3", Name = "Enum 1", Category = "Enumerations" });
            items.Add(new Item { ID = "4", Name = "Enum 2", Category = "Enumerations" });

            //items.AddRange(tiposVariaveisNormais.Select(x => new Item { ID = x.ToString(), Name = x.ToString(), Category = "Variáveis" }));
            // Adicione outras entidades, enums ou propriedades normais conforme necessário
            return items;
        }
    }

    public string[] tiposVariaveisNormais = new string[]
    {
            "ImageFieldInfo",
            "byte[]",
            "byte[]?",
            "string",
            "string?",
            "string[]",
            "object",
            "System.Guid",
            "System.Guid?",
            "bool",
            "bool?",
            "int",
            "int?",
            "decimal",
            "decimal?",
            "double",
            "double?",
            "DateOnly",
            "TimeOnly",
            "DateOnly?",
            "TimeOnly?",
            "DayOfWeek",
            "DayOfWeek?",
            "DateTimeOffset",
            "DateTimeOffset?",
            "DateTime",
            "DateTime?"
    };

    ObjectValueTypes GetMyPropertyType(string aggName, string typeName)
    {
        var myEnums = this.GetMyEnumerations(aggName);
        if (tiposVariaveisNormais.Any(x => x.Equals(typeName, StringComparison.InvariantCultureIgnoreCase)))
        {
            return ObjectValueTypes.Property;
        }
        else if (this.GetMyEnumerations(aggName).Any(x => x.Equals(typeName, StringComparison.InvariantCultureIgnoreCase)))
        {
            return ObjectValueTypes.Enumeration;
        }
        else return ObjectValueTypes.Entity;
    }

    public class PropertyDetails
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }
}
